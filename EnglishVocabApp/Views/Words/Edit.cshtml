@using Humanizer.Localisation
@using Microsoft.AspNetCore.Mvc.Localization
@model EnglishVocabApp.ViewModels.WordViewModel

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = @Localizer["lblTitle"];
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 style="text-transform: uppercase; text-align: center; margin-bottom: 30px;">@Localizer["lblWordEditor"]</h1>
<div class="row justify-content-center">
    <div class="col-md-6">
        <form asp-action="Edit" onsubmit="updateHiddenFields()">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <input type="hidden" asp-for="Id" />

            <div class="form-group mb-3 position-relative">
                <div class="input-wrapper">
                    <input asp-for="Name" class="form-control custom-input" placeholder=" " style="border-radius: 50px;" />
                    <span class="input-hint">@Localizer["lblNameOfTheWord"]</span>
                </div>
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <div class="input-wrapper">
                    <div class="dropdown-container">
                        <select asp-for="TypeName" class="form-control custom-select dropdown-select" style="border-radius: 50px;">
                            <option value=""></option>
                            @foreach (var type in ViewBag.WordTypes as List<string>)
                            {
                                <option value="@type">@type</option>
                            }
                        </select>
                        <span class="input-hint2">@Localizer["lblWordType"]</span>
                        <div class="dropdown-caret">
                            <i class="fa fa-chevron-up"></i> <!-- Font Awesome chevron-up -->
                        </div>
                    </div>
                </div>
                <span asp-validation-for="TypeName" class="text-danger"></span>
            </div>

            <div class="form-group mb-3 position-relative">
                <div class="input-wrapper">
                    <input asp-for="Transcript" class="form-control custom-input" placeholder=" " style="border-radius: 50px;" />
                    <span class="input-hint">@Localizer["lblTranscript"]</span>
                </div>
                <span asp-validation-for="Transcript" class="text-danger"></span>
            </div>

            <div class="form-group mb-3 position-relative">
                <div class="input-wrapper">
                    <input asp-for="Meaning" class="form-control custom-input" placeholder=" " style="border-radius: 50px;" />
                    <span class="input-hint">@Localizer["lblMeaningOfTheWord"]</span>
                </div>
                <span asp-validation-for="Meaning" class="text-danger"></span>
            </div>

            <!-- Examples -->
            <div class="form-group mb-3">
                <div class="input-wrapper">
                    <input type="text" id="newExample" class="form-control custom-input" placeholder=" " style="border-radius: 50px;" />
                    <span class="input-hint">@Localizer["lblExampleOfUseInASentence"]</span>
                </div>
                <button type="button" class="btn rounded-pill w-60 mt-2"
                        style="background-color: #ffffff; color: grey; border: 1px solid #d3d3d3; font-weight: 500; padding-left: 15px; padding-right: 15px;"
                        onmouseover="this.style.backgroundColor='#f1f1f1';"
                        onmouseout="this.style.backgroundColor='#ffffff';"
                        onclick="addExample()">
                    @Localizer["lblAddExample"]
                </button>
                <input type="hidden" asp-for="ExamplesString" id="examplesInput" />
                
                <ul id="examplesList" class="custom-list">
                    @foreach (var example in Model.Examples)
                    {
                        <li class="custom-list-item">
                            <span class="list-text">@example</span>
                            <button type="button" onclick="removeExample('@example')" class="remove-btn"></button>
                        </li>
                    }
                </ul>
            </div>


            <!-- Synonyms -->
            <div class="form-group mb-3">
                <div class="input-wrapper" style="margin-top: 10px;">
                    <input type="text" id="newSynonym" class="form-control custom-input" placeholder=" " style="border-radius: 50px; " />
                    <span class="input-hint">@Localizer["lblTypeASynonym"]</span>
                </div>
                <button type="button" class="btn rounded-pill w-60 mt-2"
                        style="background-color: #ffffff; color: grey; border: 1px solid #d3d3d3; font-weight: 500; padding-left: 15px; padding-right: 15px;"
                        onmouseover="this.style.backgroundColor='#f1f1f1';"
                        onmouseout="this.style.backgroundColor='#ffffff';"
                        onclick="addSynonym()">
                    @Localizer["lblAddSynonym"]
                </button>
                <input type="hidden" asp-for="SynonymsString" id="synonymsInput" />

                <ul id="synonymsList" class="custom-list">
                    @foreach (var synonym in Model.Synonyms)
                    {
                        <li class="custom-list-item">
                            <span class="list-text">@synonym</span>
                            <button type="button" onclick="removeSynonym('@synonym')" class="remove-btn"></button>
                        </li>
                    }
                </ul>
            </div>

            <!-- Antonyms Section -->
            <div class="form-group mb-3">
                <div class="input-wrapper" style="margin-top: 10px;">
                    <input type="text" id="newAntonym" class="form-control custom-input" style="border-radius: 50px;" />
                    <span class="input-hint">@Localizer["lblTypeAnAntonym"]</span>
                </div>
                <button type="button" class="btn rounded-pill w-60 mt-2"
                        style="background-color: #ffffff; color: grey; border: 1px solid #d3d3d3; font-weight: 500; padding-left: 15px; padding-right: 15px;"
                        onmouseover="this.style.backgroundColor='#f1f1f1';"
                        onmouseout="this.style.backgroundColor='#ffffff';"
                        onclick="addAntonym()">
                    @Localizer["lblAddAntonym"]
                </button>
                <input type="hidden" asp-for="AntonymsString" id="antonymsInput" />

                <ul id="antonymsList" class="custom-list">
                    @foreach (var antonym in Model.Antonyms)
                    {
                        <li class="custom-list-item">
                            <span class="list-text">@antonym</span>
                            <button type="button" onclick="removeAntonym('@antonym')" class="remove-btn"></button>
                        </li>
                    }
                </ul>
            </div>

            <div class="form-group mt-3 text-center">
                <button type="submit" class="btn rounded-pill btn-custom"
                        style="background-color: #555555; color: white; border: none; font-weight: 500;"
                        onmouseover="this.style.backgroundColor='#777777';"
                        onmouseout="this.style.backgroundColor='#555555';">
                    <i class="fas fa-bookmark"></i>@Localizer["lblSave"]
                </button>

                <a asp-action="Index" class="btn rounded-pill w-60 btn-custom"
                   style="background-color: #ffffff; color: grey; border: 1px solid #d3d3d3; font-weight: 500; text-align: center; text-decoration: none; margin-left: 15px;"
                   onmouseover="this.style.backgroundColor='#f1f1f1';"
                   onmouseout="this.style.backgroundColor='#ffffff';">
                    <i class="fas fa-columns" style="color: grey; margin-right: 8px;"></i>@Localizer["lblBackToList"]
                </a>

            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        let examples = @Html.Raw(Json.Serialize(Model.Examples));
        let synonyms = @Html.Raw(Json.Serialize(Model.Synonyms));
        let antonyms = @Html.Raw(Json.Serialize(Model.Antonyms));

        function addExample() {
            let value = document.getElementById("newExample").value;
            if (value.trim()) {
                examples.push(value);
                updateExamplesList();
                document.getElementById("newExample").value = "";
            }
        }

        function removeExample(value) {
            examples = examples.filter(item => item !== value);
            updateExamplesList();
        }

        function updateExamplesList() {
            document.getElementById("examplesList").innerHTML = examples.map(item =>
                `<li>${item} <button type="button" onclick="removeExample('${item}')" class="remove-btn"></button></li>`
            ).join("");
            document.getElementById("examplesInput").value = examples.join(";");
        }

        function addSynonym() {
            let value = document.getElementById("newSynonym").value;
            if (value.trim()) {
                synonyms.push(value);
                updateSynonymsList();
                document.getElementById("newSynonym").value = "";
            }
        }

        function removeSynonym(value) {
            synonyms = synonyms.filter(item => item !== value);
            updateSynonymsList();
        }

        function updateSynonymsList() {
            document.getElementById("synonymsList").innerHTML = synonyms.map(item =>
                `<li>${item} <button type="button" onclick="removeSynonym('${item}')" class="remove-btn"></button></li>`
            ).join("");
            document.getElementById("synonymsInput").value = synonyms.join(", ");
        }


        function addAntonym() {
            let value = document.getElementById("newAntonym").value;
            if (value.trim()) {
                antonyms.push(value);
                updateAntonymsList();
                document.getElementById("newAntonym").value = "";
            }
        }

        function removeAntonym(value) {
            antonyms = antonyms.filter(item => item !== value);
            updateAntonymsList();
        }

        function updateAntonymsList() {
            // Clear existing list items and create new ones with correct classes
            let listContainer = document.getElementById("antonymsList");
            listContainer.innerHTML = '';  // Clear the existing list

            antonyms.forEach(item => {
                // Create list item with classes
                let listItem = document.createElement("li");
                listItem.classList.add("custom-list-item");

                // Add the item text
                let span = document.createElement("span");
                span.classList.add("list-text");
                span.textContent = item;
                listItem.appendChild(span);

                // Create the remove button with proper classes
                let removeBtn = document.createElement("button");
                removeBtn.classList.add("remove-btn");
                removeBtn.setAttribute("type", "button");
                removeBtn.setAttribute("onclick", `removeAntonym('${item}')`);
                listItem.appendChild(removeBtn);

                // Append the created list item to the list
                listContainer.appendChild(listItem);
            });

            // Update the hidden input
            document.getElementById("antonymsInput").value = antonyms.join(", ");
        }


        function updateHiddenFields() {
            document.getElementById("examplesInput").value = examples.join(";");
            document.getElementById("synonymsInput").value = synonyms.join(", ");
            document.getElementById("antonymsInput").value = antonyms.join(", ");
        }
    </script>
}


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">


<style>
    .btn-custom {
        height: 40px;
        line-height: 40px;
        padding: 0 25px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        box-sizing: border-box;
        gap: 8px;
    }
    .remove-btn {
        background: none;
        border: none;
        color: darkgrey;
        font-size: 20px;
        cursor: pointer;
        font-weight: bold;
        transition: color 0.3s ease;
    }
        .remove-btn:hover {
            color: black;
        }
        .remove-btn:before {
            content: '×';
            font-size: 20px;
            text-align: center;
            line-height: 15px;
        }

    .input-wrapper {
        position: relative;
        display: inline-block;
        width: 100%;
    }

    .custom-input {
        width: 100%;
        padding-right: 240px; /* Adjusted padding to avoid overlap */
        border-radius: 50px;
        border: 1px solid #ccc;
        height: 40px;
        box-sizing: border-box;
        padding-left: 15px;
    }

    .input-hint {
        position: absolute;
        right: 15px; /* usual hints */
        top: 50%;
        transform: translateY(-50%);
        color: #888;
        pointer-events: none; /* Ensures the hint doesn't block input focus */
        font-size: 14px;
        font-weight: 400;
        transition: transform 0.3s ease-in-out;
    }
    .input-hint2 {
        position: absolute;
        right: 40px; /* unusual hint */
        top: 50%;
        transform: translateY(-50%);
        color: #888;
        pointer-events: none; /* Ensures the hint doesn't block input focus */
        font-size: 14px;
        font-weight: 400;
        transition: transform 0.3s ease-in-out;
    }
    .custom-list {
        list-style: none;
        padding: 0;
        margin-top: 5px;
        display: flex;
        flex-wrap: wrap;
        gap: 0px 30px; /* Reduce vertical gap while keeping horizontal spacing */
        align-items: center;
    }
    .custom-list-item {
        background-color: transparent;
        padding: 2px 0;
        border-radius: 0;
        display: inline-flex;
        align-items: center;
        gap: 0px 5px;
        border: none;
        white-space: nowrap;
    }

    .list-text {
        font-size: 15px;
        color: #333;
        line-height: 15px;
    }
    .dropdown-container { /* Wrapper for the dropdown */
        position: relative;
        display: flex;
        align-items: center;
    }
    .dropdown-select { /* Select dropdown */
        width: 100%;
        padding-right: 40px;
        border-radius: 50px;
        appearance: none;
        cursor: pointer;
    }
    .dropdown-caret { /* Positioning the caret icon */
        position: absolute;
        right: 12px;
        font-size: 18px;
        color: grey;
        transition: transform 0.3s ease-in-out, color 0.3s ease-in-out;
    }

    .dropdown-container:hover .dropdown-caret { /* Rotate caret on hover */
        transform: rotate(180deg);
        color: #555;
    }
    .dropdown-container:hover .input-hint2 { /* move hint on hover */
        transform: translateY(-50%) scale(1.07);
        color: #555;
    }

</style>
