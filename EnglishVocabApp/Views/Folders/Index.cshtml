@using Humanizer.Localisation
@using Microsoft.AspNetCore.Mvc.Localization

@* @model IEnumerable<EnglishVocabApp.ViewModels.FolderViewModel> *@
@model EnglishVocabApp.Models.PaginateList<Folder, EnglishVocabApp.ViewModels.FolderViewModel>

@using System.Security.Claims

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = @Localizer["lblTitleFold"];
}

<h1>Folders (@Model.ShowedItemsCount of @Model.TotalItemsCount items)</h1>
<h1>@Localizer["lblTitleFold"]</h1>

<p>
    @* <a asp-action="Create">@Localizer["lblCreateNewFolder"]</a> *@
    <button class="btn btn-primary" onclick="addEntity('/Folders/Create')">
        @Localizer["lblCreateNewFolder"]
    </button>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().IsPrivate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().User)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().CreatedAt)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().UpdatedAt)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model) {

            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            bool isOwner = item.UserId == userId;

            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsPrivate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.User.UserName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedAt)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UpdatedAt)
                </td>
                <td>
                    @* <a asp-action="Edit" asp-route-id="@item.Id">@Localizer["lblEditFolder"]</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">@Localizer["lblDetailsAboutFolder"]</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">@Localizer["lblDeleteThisFolder"]</a> *@
                    <button class="btn btn-info btn-sm" onclick="addEntity('/Folders/Details/@item.Id')">
                        @Localizer["lblDetailsAboutFolder"]
                    </button> |
                    @if (isOwner)
                    {
                        <button class="btn btn-warning btn-sm" onclick="addEntity('/Folders/Edit/@item.Id')">
                            @Localizer["lblEditFolder"]
                        </button>
                        <span> | </span>
                        <button class="btn btn-danger btn-sm" onclick="addEntity('/Folders/Delete/@item.Id')">
                            @Localizer["lblDeleteThisFolder"]
                        </button>
                    }

                    @if (User?.Identity?.IsAuthenticated == true)
                    {
                        //var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);

                        // Check if the user owns the folder or has already saved it
                        //bool isOwner = item.UserId == userId;
                        bool isSaved = item.FoldersUsers?.Any(fu => fu.UserId == userId) ?? false;

                        if (!isOwner)
                        {
                            // Show Save to My Folders button only for folders the user does not own
                            if (!isSaved)
                            {
                                <form asp-action="SaveFolder" asp-controller="Folders" method="post" style="display:inline;">
                                    <input type="hidden" name="folderId" value="@item.Id" />
                                    <button type="submit" class="btn btn-sm btn-primary">@Localizer["lblSaveToTheListFolder"]</button>
                                </form>
                            }
                            // Show Remove from My Folders button if the user has saved the folder
                            else if (isSaved)
                            {
                                <form asp-action="RemoveFolder" asp-controller="Folders" method="post" style="display:inline;">
                                    <input type="hidden" name="folderId" value="@item.Id" />
                                    <button type="submit" class="btn btn-sm btn-danger">@Localizer["lblRemoveFromTheListFolder"]</button>
                                </form>
                            }
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<label for="FolderPages">Current: @Model.PageIndex page of the @Model.TotalPages page(s).</label>
<div id="FolderPages">
    <a class="btn btn-success @(Model.HasPreviousPage ? "" : "disabled")"
       href="/folders/index?pageIndex=@(Model.PageIndex - 1)">
        Previous
    </a>

    <a class="btn btn-success @(Model.HasNextPage ? "" : "disabled")"
       href="/folders/index?pageIndex=@(Model.PageIndex + 1)">
        Next
    </a>
</div>